alter session set  current_schema=datosdb;
alter session set  current_schema=a143045;
select user from dual;

ALTER TABLE TABLA_PROPIETARIOS MODIFY OBSERVACIONES VARCHAR2(1500); 
SELECT * FROM TABLA_PROPIETARIOS;
SELECT COUNT(*) FROM PARCELAS_GALILEO;
SELECT COUNT(*) FROM TABLA_PROPIETARIOS;
DELETE FROM TABLA_PROPIETARIOS;
DELETE FROM PARCELAS_GALILEO;
COMMIT;
-- Atributos de DATOSPELICULAS
DESCRIBE DATOSDB.DATOSPELICULAS;
-- Todas las tuplas de DATOSPELICULAS
SELECT * FROM DATOSDB.DATOSPELICULAS
WHERE TITLE LIKE 'Ciu%';
SELECT * FROM DATOSDB.DATOSPELICULAS
WHERE KIND LIKE 'epi%' AND SERIE_TITLE IS NOT NULL
order by TITLE;
SELECT * FROM DATOSDB.DATOSPELICULAS
WHERE SERIE_TITLE LIKE 'Menudo es%';
-- Número total de tuplas en DATOSPELICULAS
SELECT COUNT(*) FROM DATOSDB.DATOSPELICULAS;
-- Número diferente de personas que participan en película o serie
SELECT COUNT(DISTINCT(NAME))FROM DATOSDB.DATOSPELICULAS;
-- Diferentes personas que aparecen en DATOSPELICULAS
SELECT DISTINCT(NAME)FROM DATOSDB.DATOSPELICULAS;
-- Diferentes roles que aparecen en DATOSPELICULAS
SELECT DISTINCT(ROLE)FROM DATOSDB.DATOSPELICULAS;
-- Número de veces que se repite cada role (hay nulos que no los cuenta)
SELECT ROLE,COUNT(ROLE) FROM DATOSDB.DATOSPELICULAS GROUP BY ROLE;
-- Todas las tuplas de DATOSPELICULAS donde ROLE=NULL
SELECT * FROM DATOSDB.DATOSPELICULAS WHERE ROLE IS NULL;
-- Todas las tuplas que tienen algún dato en ROLE, pero que el mismo TITLE tiene alguna tupla con ROLE=NULL
SELECT * FROM DATOSDB.DATOSPELICULAS WHERE TITLE IN (SELECT TITLE FROM DATOSDB.DATOSPELICULAS WHERE ROLE IS NULL) AND ROLE IS NOT NULL;
-- Diferentes INFO_CONTEXT que aparecen en DATOSPELICULAS
SELECT DISTINCT(INFO_CONTEXT) FROM DATOSDB.DATOSPELICULAS;
-- Tuplas que forman una secuencia (remake, secuela o precuela)
SELECT * FROM DATOSDB.DATOSPELICULAS WHERE titlelink is not null;
-- Diferentes tipos de secuencia
SELECT DISTINCT(link) FROM DATOSDB.DATOSPELICULAS WHERE link is not null;
-- Roles nulos
SELECT * FROM DATOSDB.DATOSPELICULAS WHERE link like 'remade as' AND TITLELINK LIKE 'El vivo retrato';
SELECT COUNT(ROLE) FROM DATOSDB.DATOSPELICULAS WHERE ROLE IS NULL;
-- Año de producción más reciente
SELECT MAX(PRODUCTION_YEAR) FROM DATOSDB.DATOSPELICULAS;
-- Películas con el mismo nombre en diferente año de producción
SELECT DISTINCT(ROLE) FROM DATOSDB.DATOSPELICULAS;
SELECT A.TITLE, A.PRODUCTION_YEAR
FROM DATOSDB.DATOSPELICULAS A
WHERE A.TITLE IN (SELECT B.TITLE
        FROM DATOSDB.DATOSPELICULAS B
        WHERE A.TITLE=B.TITLE AND
              A.PRODUCTION_YEAR<>B.PRODUCTION_YEAR)
ORDER BY A.TITLE, A.PRODUCTION_YEAR;

WITH REPETIDAS AS (
SELECT A.TITLE, A.PRODUCTION_YEAR, A.KIND
FROM DATOSDB.DATOSPELICULAS A
WHERE A.TITLE IN (SELECT B.TITLE
        FROM DATOSDB.DATOSPELICULAS B
        WHERE A.TITLE=B.TITLE AND
              A.PRODUCTION_YEAR<>B.PRODUCTION_YEAR)
              )
SELECT DISTINCT(CONCAT(CONCAT(CONCAT(TITLE,CONCAT(' / ',PRODUCTION_YEAR)),' / '),KIND)) REPE
FROM REPETIDAS
ORDER BY REPE;

SELECT DISTINCT(KIND)
FROM DATOSDB.DATOSPELICULAS;
              
CREATE TABLE vincular (
    id_vinculo NUMBER(12) PRIMARY KEY,
    obra_1  NUMBER(12) NOT NULL ,
    obra_2  NUMBER(12) NOT NULL,
    vinculo VARCHAR2(60) CONSTRAINT vinculo_chk CHECK ( vinculo IN ( 'precuela', 'remake', 'secuela' ) ) NOT NULL,
    CONSTRAINT vincular_obra_fk1 FOREIGN KEY ( obra_1 ) REFERENCES obra ( id_obra ),
    CONSTRAINT vincular_obra_fk2 FOREIGN KEY ( obra_2 ) REFERENCES obra ( id_obra ),
    CONSTRAINT vinvular_chk CHECK ( obra_1 <> obra_2 )
);

CREATE SEQUENCE vin_id_vin_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER vin_id_vin_trg BEFORE
    INSERT ON vincular
    FOR EACH ROW
    WHEN ( new.id_vinculo IS NULL )
BEGIN
    :new.id_vinculo := vin_id_vin_seq.nextval;
END;
